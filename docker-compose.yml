version: "3.3"
services:

  # RabbitMQ that connects the backend to the frontend
  bladecaller_queue:
    image: rabbitmq:3-management
    expose:
      # The standard AMQP protocol port
      - 5672
    ports:
      # HTTP management UI
      - '15672:15672'
      - '5672:5672' # while we're testing\
    expose:
      - 15672
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1

  mock_producer:
    build: "./mockProducer"
    command: "/usr/bin/python3.7 example.py"
    expose:
      - "5672"

  rakan_engine:
    build: .
    expose:
      - "5672"
    # For development only
    volumes: 
      - "./:/home/project"

# Development Operations
# t1: docker-compose build, docker-compose up
# t2: docker-compose run rakan_engine
# Both containers should be able to communicate to each other now